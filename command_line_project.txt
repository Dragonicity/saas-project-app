CREATE APPLICATION

rails new saas-project-app -d postgresql
bundle install
rake db:create db:migrate

git init
git commit -m "Create rails app"
Create git repository for app
git remote add origin https://github.com/Dragonicity/saas-project-app.git
git push -u origin master

Create placeholder homepage:
rails generate controller home index
Add route to routes.rb in config directory in place of 'welcome/index'
root 'home#index'

Add production group in gemfile with rails12_factor
bundle install
git add -A
git commit -m "Make app production ready"
git push

heroku create
heroku rename dragon-saas-sapp
git push heroku master

ADD EMAIL HANDLING

heroku addons:create sendgrid:starter
Update  heroku username and password if needed

Add to config/environment.rb

ActionMailer::Base.smtp_settings = {
  :address        => 'smtp.sendgrid.net',
  :port           => '587',
  :authentication => :plain,
  :user_name      => ENV['SENDGRID_USERNAME'],
  :password       => ENV['SENDGRID_PASSWORD'],
  :domain         => 'heroku.com',
  :enable_starttls_auto => true
}

Add the following to config/environments/development.rb

config.action_mailer.delivery_method = :test
config.action_mailer.default_url_options = { :host => 'http://localhost:3000' }

Add the following to config/environments/production.rb

config.action_mailer.delivery_method = :smtp
config.action_mailer.default_url_options = { :host => 'dragon-saas-app.herokuapp.com', :protocol => 'https' }

In app/assets/javascripts/application.js remove tubrolinks and also remove from gemfile and run bundle install.

git add -A
git commit -m "Add sendmail"
git push
git push heroku master

ADD DEVISE AND MILIA (MULTITENANCY)

Add gems to gemfile

gem 'pg'
gem 'devise'
gem 'milia'

Remove root from routes.db in config (Milia uses it own)
rails generate milia:install --org_email='do-not-reply@example.com'
rake db:migrate

git add -A
git commit -m "Add devise and milia for multitenancy"
git push
git push heroku master
heroku run rake db:migrate

INSTALL BOOTSTRAP AND ADD STYLING

Add bootstrap gem to gemfile
gem 'twitter-bootstrap-rails'
bundle install
rails generate bootstrap:install static
Add devise bootstrap views gem to gemfile
gem 'devise-bootstrap-views'
bundle install
rails generate devise:views:locale en
rails generate devise:views:bootstrap_templates

In app/assets/stylesheets application.css add:
*= require devise_bootstrap_views

rails generate bootstrap:layout application

In app/helpers/application_helper.rb add twitter bootstrap flash helper code:

ALERT_TYPES = [:success, :info, :warning, :danger] unless const_defined?(:ALERT_TYPES)

  def bootstrap_flash(options = {})
    flash_messages = []
    flash.each do |type, message|
      # Skip empty messages, e.g. for devise messages set to nothing in a locale file.
      next if message.blank?

      type = type.to_sym
      type = :success if type == :notice
      type = :danger  if type == :alert
      type = :danger  if type == :error
      next unless ALERT_TYPES.include?(type)

      tag_class = options.extract!(:class)[:class]
      tag_options = {
        class: "alert fade in alert-#{type} #{tag_class}"
      }.merge(options)

      close_button = content_tag(:button, raw("&times;"), type: "button", class: "close", "data-dismiss" => "alert")

      Array(message).each do |msg|
        text = content_tag(:div, close_button + msg, tag_options)
        flash_messages << text if msg
      end
    end
    flash_messages.join("\n").html_safe
  end

  In config/initializers/milia.rb set the following to false:

  config.use_coupon = false
  config.use_recaptcha = false

Set session tenant id in home controller index action:

def index
  if current_user
    if session[:tenant_id]
      Tenant.set_current_tenant session[:tenant_id]
    else
      Tenant.set_current_tenant curent_user.tenants.first
    end

    @tenant = Tenant.current_tenant
    params[:tenant_id] = @tenant.id
  end
end

Restart rails server to pick up changes

BUILD HOMEPAGE AND ADD STYLING

Change app/views/layouts/application.html.erb adding coce after links:

<ul class="nav navbar-right col-md-4">
  <% if current_user %>
    <li class="col-md-8 user-name">
    <%= link_to ('<i class="fa fa-user"></i> ' + truncate(current_user.email, length: 25)).html_safe, edit_user_registration_path, title: 'Edit Profile' %>
    </li>
    <li class="col-md-1"> </li>
    <li class="col-md-3 logout"><%= link_to('Logout', destroy_user_session_path, class: 'btn btn-xs btn-danger', title: 'Logout', :method => :delete) %></li>
  <% else %>
    <li class="col-md-4 pull-right">
    <%= link_to('Sign In', new_user_session_path, class: 'btn btn-primary', title: 'Sign In') %>
    </li>
  <% end %>
</ul>

Also, remove sidebar block from this file and links.

Create app/assets/stylesheets/custom.css.scss and include the 1st 63 lines from photo-app file. Add image to app/assets/image referred to in custom css file.

Edit views/home/index.html.erb and include text as per photo-app with apt changes.

PLANS

Add plan attribute to tenant:
rake db:migrate


Add class Plan (does not inherit from ActiveRecord::Base as we will not have plans table)

class Plan

  PLANS = [:free, :premium]

  def self.options
    PLANS.map { |plan| [plan.capitalize, plan] }
  end

end

In config/initializers/milia.rb uncomment whitelist temant params and add plan
config.whitelist_tenant_params = [:plan]

In tenant model add name validation and generalise tenant oparameters:
validates_uniqueness_of :name
validates_presence_of :name
tenant = Tenant.new(tenant_params) - was name only before

Add organisation and oplan fields to user sign_up form:

<%= fields_for(:tenant) do |w| %>
  <div class="form-group col-md-6 no-left-padding">
    <%= w.label :name, 'Organisation' %>
    <span class="description">(Unique name for organsation for the new account)</span>
    <%= w.text_field :name, required: true, class: "form-control" %>
  </div>
  <div class="form-group col-md-6 no-right-padding">
    <%= w.label :plan %>
    <%= w.select :plan, options_for_select(Plan.options, params[:plan]), {}, required: true, class: "form-control" %>
  </div>
<% end %>

Add styling in custom css file:

.no-left-padding {
  padding-left: 0 !important;
}

.no-right-padding {
  padding-right: 0 !important;
}

Add confirmations controller (want to override default Milia confirmations)

class ConfirmationsController < Milia::ConfirmationsController

  def update
    if @confirmable.attempt_set_password(user_params)

    # this section is patterned off of devise 3.2.5 confirmations_controller#show

    self.resource = resource_class.confirm_by_token(params[:confirmation_token])
    yield resource if block_given?
      if resource.errors.empty?
        log_action( "invitee confirmed" )
        set_flash_message(:notice, :confirmed) if is_flashing_format?
        # sign in automatically
        sign_in_tenanted_and_redirect(resource)
          
      else
        log_action( "invitee confirmation failed" )
        respond_with_navigational(resource.errors, :status => :unprocessable_entity){ render :new }
      end
    else
      log_action( "invitee password set failed" )
      prep_do_show()  # prep for the form
      respond_with_navigational(resource.errors, :status => :unprocessable_entity){ render :show }
    end  # if..then..else passwords are valid
  end

  def show
    if @confirmable.new_record?  ||
       !::Milia.use_invite_member || 
       @confirmable.skip_confirm_change_password

      log_action( "devise pass-thru" )
      self.resource = resource_class.confirm_by_token(params[:confirmation_token])
      yield resource if block_given?
      if resource_errors.empty?
        set_flash_message(:notice, :confirmed) if is_flashing_format?
      end
      if @confirmable.skip_confirm_change_password
        sign_in_tenanted_and_redirect(resource)
      end
    else
      log_action( "password set form" )
      flash[:notice] = "Please choose a password andconfirm it"
      prep_do_show()  # prep for the form
    end
    # else fall thru to show template which is form to set a password
    # upon SUBMIT, processing will continue from update
  end

  def after_confirmation_path_for(resource_name, resource)
    if user_signed_in?
      root_path
    else
      new_user_session_path
    end
  end

  private

  def set_confirmable()
    @confirmable = User.find_or_initialize_with_error_by(:confirmation_token, params[:confirmation_token])
  end

end

Change two instances of milia/confirmations to confirmations in routes.db

Clone views/devise/new.html.erb to show.html.erb and make changes to produce below:

<%= bootstrap_devise_error_messages! %>
<div class="panel panel-default devise-bs">
  <div class="panel-heading">
    <h4>Create Password</h4>
  </div>
  <div class="panel-body">
    <%= form_for(resource, :as => resource_name, :url => update_user_confirmation_path, 
      :html => { :method => :put, :class => "form login" }) do |f| %>
      <%= hidden_field_tag :confirmation_token, @confirmation_token %>
      <div class="form-group">
        <%= f.label :password, :class => "control-label" %>
        <%= f.password_field :password, class => "form-control"  %>
      </div>
      <div class="form-group">
        <%= f.label :password_confirmation, :class => "control-label" %>
        <%= f.password_field :password_confirmation, class => "form-control"  %>
      </div>
      <%= f.submit 'Create Password', class: "btn btn-primary" %>
    <% end %>
  </div>
</div>

Update views/devise/mailer/confirmation_instructions.html.erb file to use right url (with token):

<p><%= link_to t('.action', :default => "Confirm my account"),
  user_confirmation_url(:confirmation_token => @token, locale: I18n.locale) %></p>


Replace contents of app/view/members/net.html.haml with:

<%- model_class = Member -%>

<div class="page-header">
  <h1><%=t '.title', :default => [:'helpers.titles.new', 'Invite New %{model}'], :model => model_class.model_name.human.titleize %></h1>
</div>
<%= form_for(@member, :html => { :class => "form login" }) do |f| %>
  <% if @member.errors.any? %>
    <div id="error_expl" class="panel panel-danger">
      <div class="panel-heading">
        <h3 class="panel-title"><%= pluralize(@member.errors.count, "error") %> prohibited this Member from being saved:</h3>
      </div>
      <div class="panel-body">
        <ul>
          <% @member.errors.full_messages.each do |msg| %>
            <li><%= msg %></li>
          <% end %>
        </ul>
      </div>
    </div>
  <% end %>
  <% if @user.errors.any? %>
    <div id="error_expl" class="panel panel-danger">
      <div class="panel-heading">
        <h3 class="panel-title"><%= pluralize(@user.errors.count, "error") %> prohibited this Member from being saved:</h3>
      </div>
      <div class="panel-body">
        <ul>
          <% @user.errors.full_messages.each do |msg| %>
            <li><%= msg %></li>
          <% end %>
        </ul>
      </div>
    </div>
  <% end %>
  <%= fields_for( :user ) do |w| %>
    <div class="control-group">
      <%= w.label :email, :class => "control-label" %>
      <div class="controls">
        <%= w.text_field :email, :class => 'form-control' %>  
      </div>
    </div>
  <% end %>
  <div class="control-group">
    <%= f.label :first_name, :class => "control-label" %>
    <%= f.text_field :first_name, :class => "form-control" %>
  </div>
  <div class="control-group">
    <%= f.label :last_name, :class => "control-label" %>
    <%= f.text_field :last_name, :class => "form-control" %>
  </div>
  <br />
  <div class="control-group">
    <button class="btn btn-primary" type="submit">
      Create user and invite
    </button>
  </div>
<% end %>

Update following in config/initializers/devise.rb:

uncomment the line:
config.mailer = 'Devise::Mailer'
uncomment the line (and change 2.days to 0.days):
config.allow_unconfirmed_access_for = 0.days
uncomment the lines:
config.confirm_within = 3.days
config.confirmation_keys = [:email]

Add link to invite members in navigation view/laytouts/application.html.erb:

<% if current_user %>
  <li>
    <%= link_to "<i class='fa fa-users'></i> Add Members".html_safe,
        new_member_path, class: 'navbar-link btn btn-primary' %>
  </li>
<% end %>

PROJECTS

rails generate scaffold project title:string details:string expected_end_date:date tenant:belongs_to

rake db:migrate

Create nested project routes within tenant in routes.db

resources :tenants do
  resources :projects
end

Add Bootstrap to Project views:
rails generate bootstrap:themed Projects

Update projects index.html.erb:

Make it a partial 

%- model_class = Project -%>
<div class="page-header">
  <h1><%=t '.title', :default => model_class.model_name.human.pluralize.titleize %></h1>
</div>
<table class="table table-striped">
  <thead>
    <tr>
      <th><%= model_class.human_attribute_name(:title) %></th>
      <th><%= model_class.human_attribute_name(:details) %></th>
      <th><%= model_class.human_attribute_name(:expected_end_date) %></th>
      <th><%=t '.actions', :default => t("helpers.actions") %></th>
    </tr>
  </thead>
  <tbody>
    <% @projects.each do |project| %>
      <tr>
        <td><%= link_to project.title, 
          tenant_project_path(project, tenant_id: @tenant.id), class: 'main-link' %></td>
        <td><%= project.details %></td>
        <td><%= project.expected_end_date %></td>
        <td>
          <%= link_to t('.edit', :default => t("helpers.links.edit")),
                      edit_tenant_project_path(project, tenant_id: @tenant.id), :class => 'btn btn-default btn-xs' %>
          <%= link_to t('.destroy', :default => t("helpers.links.destroy")),
                      tenant_project_path(project, tenant_id: @tenant.id),
                      :method => :delete,
                      :data => { :confirm => t('.confirm', :default => t("helpers.links.confirm", :default => 'Are you sure?')) },
                      :class => 'btn btn-xs btn-danger' %>
        </td>
      </tr>
    <% end %>
  </tbody>
</table>

<%= link_to 'New Project', new_tenant_project_path(tenant_id: @tenant.id),
            :class => 'btn btn-primary' %>

Make link_to path changes as above in other project views.

in _form.html.erb:

<%= form_for @[@tenant, @project], :html => { :class => "form-horizontal project" } do |f| %>

<br />
<%= f.hidden_field :tenant_id, value: params[:tenant_id], :class => 'form-control' %>

<div class="form-group">
  <div class="col-lg-offset-2 col-lg-10">
    <%= f.submit nil, :class => 'btn btn-primary' %>
    <%= link_to t('.cancel', :default => t("helpers.links.cancel")),
                root_path, :class => 'btn btn-default' %>
  </div>
</div>

Remove tenant_if control group above this.
Make expected_end_date a date picker:

<%= f.text_field :expected_end_date, :class => 'form-control datepicker' %>

Add gem to gemfile:

gem 'bootstrap-datepicker-rails'

bundle install

Add line to application.css

*= require bootstrap-datepicker3

Add line to application.js

//= require bootstrap-datepicker

Create datepicker.js file:

$(document).ready(function() {
  $(function() {
    $('.datepicker').datepicker({format: 'yyyy-mm-dd'});
  });
};

Add styling to custom.css.scss

.table tr td {
  a.main-link {
    color: #428bca;
  }
  a.main-link.hover {
  background: none;
  }
}

Add validations and relationships to models:

class Project < ActiveRecord::Base
  belongs_to :tenant
  validates_uniqueness_of :title
  validate :free_plan_can_only_have_one_project

  def free_plan_can_only_have_one_project
    if self.new_record? && (tenant.projects.count > 0) && (tenant.plan == 'free')
      errors.add(:base, "Free plans cannot have more than one project")
    end
  end
end

In tenant.rb add
has_many :projects, dependent: :destroy

Add placeholder to retrieve projects by plan and project in projects.rb

def self.by_plan_and_tenant(tenant_id)
  tenant = Tenant.find(tenant_id)
  if tenant.plan == 'premium'
    tenant.projects
  else
    tenant.projects.order(:id).limit(1)
  end
end

Change controllers:

Add 2nd line to home.controller.rb

@tenant = Tenant.current_tenant
@projects = Project.by_user_plan_and_tenant(@tenant.id)

In projects_controller.rb

Add before_actions and associated methods

before_action :set_tenant, only: [:show, :edit, :update, :destroy, :new, :create]
before_action :verify_tenant

def set_tenant
  @tenant = Tenant.find(params[:tenant_id])
end

def verify_tenant
  unless params[:tenant_id] == Tenant.current_tenant_id.to_s
    redirect_to :root, flash { error: "You are not authorised to access any organisation other than your own" }
  end
end

Then redirect path methods: change references to project_url to root_url.

Add helper method to application_helper.rb

def tenant_name(tenant_id)
  Tenant.find(tenant_id).name
end

Modify show project view

<%- model_class = Project -%>
<div class="page-header">
  <h3><%= @project.title %></h3>
  <h3><small>Organisation - <%= tenant_name @project.tenant_id %></small></h3>
</div>

<dl class="dl-horizontal">
  <dt><strong><%= model_class.human_attribute_name(:title) %>:</strong></dt>
  <dd><%= @project.title %></dd>
  <dt><strong><%= model_class.human_attribute_name(:details) %>:</strong></dt>
  <dd><%= @project.details %></dd>
  <dt><strong><%= model_class.human_attribute_name(:expected_end_date) %>:</strong></dt>
  <dd><%= @project.expected_end_date %></dd>
  <dt><strong><%= model_class.human_attribute_name(:tenant_id) %>:</strong></dt>
  <dd><%= @project.tenant_id %></dd>
</dl>

<%= link_to '< Back to organisation home', root_path, :class => 'btn btn-default'  %>
<%= link_to t('Edit', :default => t("helpers.links.edit")),
              edit_tenant_project_path(project: @project, tenant: @project.tenant_id), :class => 'btn btn-default' %>
<%= link_to t('.destroy', :default => t("helpers.links.destroy")),
              tenant_project_path(@project, @project.tenant_id),
              :method => 'delete',
              :data => { :confirm => t('.confirm', :default => t("helpers.links.confirm", :default => 'Are you sure?')) },
              :class => 'btn btn-danger' %>

List projects on homepage

<% if current_user %>
  <h3 class="pull-right">Organisation: <%= @tenant.name %></h3>
  <%= render 'projects/list' %>
<% else %>

Restrict project new button based on plan

Display table only if projects:

<% if @projects.size > 0 %> around <table></table>

abnd at end of file:

<% else %>
  <p class="lead">You don't have any projects</p>
<% end %>

<% if @tenant.can_create_projects? %>
  <%= link_to 'New Project', 
    new_tenant_project_path(tenant_id: @tenant.id), 
    :class => 'btn btn-primary' %>
<% end %>

Put new mthod in tenant.rb

def can_create_projects?
  (plan == 'free' && projects.count < 1) || (plan == 'premium')
end

ARTIFACTS

rails generate scaffold Artifact name:string key:string project:belongs_to

rake db:migrate

Add to project.rb

has_many :artifacts, dependent: :destroy

Add to artifact.rb

class Artifact < ActiveRecord::Base
  attr_accessor :upload
  belongs_to :project

  MAX_FILESIZE = 10.megabytes
  validates_presence_of :name, :upload
  validates_uniqueness_of :name

  validate :uploaded_file_size


  private

  def  uploaded_file_size
    if upload
      errors.add(:upload, "File size must be less than #{self.class::MAX_FILESIZE}") 
        unless upload.size <= self.class::MAX_FILESIZE
    end
  end
end

Add gem to gemfile

gem 'aws-sdk'

bundle install

Create S3 bucket
Use policy generator to remove accedd denied restriciton on bucket (action GetObject)

{
  "Id": "Policy1469086992616",
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "Stmt1469086864219",
      "Action": [
        "s3:GetObject"
      ],
      "Effect": "Allow",
      "Resource": "arn:aws:s3:::dragonproject/*",
      "Principal": {
          "AWS": ["*"]
    }
  ]
}

In management comnsole under permissions select Add bucket policy and paste the generated policy.

Set keys on Heroku as for photo-app

Add to artifact.rb

before_save :upload_to_s3

def upload_to_s3
  s3 = Aws::S3::Resource.new
  tenant_name = Tenant.find(Thread.current[:tehant_id]).name
  obj = s3.bucket(ENV['AWS_S3_BUCKET']).object("#{tenant_name}/#{upload.original_filename}")
  obj.upload_file(upload.path, acl:'public-read')
  self.key = obj.public_url
end

rails generate bootstrap:themed Artifacts

Clone artifacts/index.html.erb to _list.html.erb and change to:

<%- model_class = Artifact -%>

<table class="table table-striped">
  <thead>
    <tr>
      <th><%= model_class.human_attribute_name(:name) %></th>
      <th><%= model_class.human_attribute_name(:key) %></th>
      <th><%=t '.actions', :default => t("helpers.actions") %></th>
    </tr>
  </thead>
  <tbody>
    <% artifacts.each do |artifact| %>
      <tr>
        <td><%= link_to artifact.name, artifact_path(artifact), class: 'main-link' %></td>
        <td><%= s3_link Tenant.current_tenant_id, artifact.key %></td>
        <td>
          <%= link_to t('.destroy', :default => t("helpers.links.destroy")),
                      artifact_path(artifact),
                      :method => :delete,
                      :data => { :confirm => t('.confirm', :default => t("helpers.links.confirm", :default => 'Are you sure?')) },
                      :class => 'btn btn-xs btn-danger' %>
        </td>
      </tr>
    <% end %>
  </tbody>
</table>

<%= link_to 'New Artifact', new_artifact_path(project_id: @project.id),
            :class => 'btn btn-primary' %>

Add s3_link method to application_helper.rb

def s3_link(tenant_id, artifact_key)
  link_to artifact_key, "#{artifact_key}", class: "main-link, target: 'new'
end

Change index.html.erb to be:

<%= render 'artifacts/list', artifacts: @project.artifacts %>

and also add this to projects show.html.erb before buttons

<h3>Artifacts</h3>
<%= render 'artifacts/list', artifacts: @project.artifacts %>
<br />
<br />

Change _form.html.erb to be:

<%= form_for @artifact, :html => { :class => "form-horizontal artifact" } do |f| %>

  <% if @artifact.errors.any? %>
    <div id="error_expl" class="panel panel-danger">
      <div class="panel-heading">
        <h3 class="panel-title"><%= pluralize(@artifact.errors.count, "error") %> prohibited this artifact from being saved:</h3>
      </div>
      <div class="panel-body">
        <ul>
        <% @artifact.errors.full_messages.each do |msg| %>
          <li><%= msg %></li>
        <% end %>
        </ul>
      </div>
    </div>
  <% end %>

  <div class="form-group">
    <%= f.label :name, :class => 'control-label col-lg-2' %>
    <div class="col-lg-10">
      <%= f.text_field :name, :class => 'form-control' %>
    </div>
  </div>
  <div class="form-group">
    <%= f.label :upload, value: 'File to upload', :class => 'control-label col-lg-2' %>
    <div class="col-lg-10">
      <%= f.file_field :upload, :class => 'form-control' %>
    </div>
  </div>
  <%= f.hidden_field :project_id %>
  <%= f.submit nil, :class => 'btn btn-primary' %>
  <%= link_to t('.cancel', :default => t("helpers.links.cancel")),
      tenant_project_path(tenant_id: Tenant.current_tenant_id, 
      id: @artifact.project_id), :class => 'btn btn-default' %>
<% end %>

In artifacts_controller.rb

Change params whitelisting:

def artifact_params
  params.require(:artifact).permit(:name, :project_id, :upload)
end

Make other path changes as per notes.

PAYMENTS

Install stripe gem

gem 'stripe'

bundle install

Add keys to Heroku

heroku config:set STRIPE_TEST_SECRET_KEY=
heroku config:set STRIPE_TEST_PUBLISHABLE_KEY=

Set upstripe.rb initializer

Rails.configuration.stripe = {
  :publishable_key => ENV['STRIPE_TEST_PUBLISHABLE_KEY'],
  :secret_key      => ENV['STRIPE_TEST_SECRET_KEY']
}

Stripe.api_key = Rails.configuration.stripe[:secret_key]

Set up payment model

rails generate model payment email:string token:string tenant:belongs_to

rake db:migrate

Set-up model:

class Payment < ActiveRecord::Base
  attr_accessor :card_number, :card_cvv, :card_expires_month, :card_expires_year

  belongs_to :user

  def self.month_options
    Date::MONTHNAMES.compact.each_with_index.map { |name, i| ["#{i+1} - #{name}", i+1]}
  end

  def self.year_options
    (Date.today.year..(Date.today.year+10)).to_a
  end
    
  def process_payment
    customer = Stripe::Customer.create email: email, card: token

    Stripe::Charge.create customer: customer.id,
                          amount: 1000,
                          description: 'Premium',
                          currency: 'usd'
  end

end

Add to tenant model file

has_one :payment
accepts_nested_attributes_for :payment

Add stripe javascript to application.html.erb layout:

<%= javascript_include_tag "https://js.stripe.com/v2/" %>

In devise/registrations/new.html.erb include registration code:

<script language="Javascript">
  Stripe.setPublishableKey("<%= ENV['STRIPE_TEST_PUBLISHABLE_KEY'] %>");
</script>

Now add form fields for credit cards to this view as per photo app.

Create credit-Card_form.js in assets/javascripts as per photo app with additions to manage plans.

provide edit tenant view to allow change of plans (custom registrations)

update routes file to accept registrations (remove milia/)

Copy milia registrations controller and amend to create payment in create method if plan is premium (see listing).

Add token to whitelist in milia initializers

config.whitelist_tenant_params = [:plan, :token]

Edit existing plans:

Add to routes.rb

match '/plan/edit' => 'tenants#edit', via: :get, as: :edit_plan
match '/plan/update' => 'tenants#update', via: [:put, :patch], as: :update_plan

Add tenants_controller and edit method:

class TenantsController < ApplicationController

  before_action :set_tenant

  def edit
  end

  private

    def set_tenant
      @tenant = Tenant.find(Tenant.current_tenant_id)
    end
end

Add views/tenants folder and edit template:



Add method to application helper

def class_name_for_tenant_form(tenant)
    return "cc_form" if tenant.payment.blank?
    ""
end

<script language="Javascript">
  Stripe.setPublishableKey("<%= ENV['STRIPE_TEST_PUBLISHABLE_KEY'] %>");
</script>

<%= form_for @tenant, url: update_plan_path, html: { class: "#{class_name_for_tenant_form(@tenant)}"} do |f| %>

  <div class="form-group col-md-12 no-left-padding">
    <%= f.label :name, 'Organization' %>
    <span class='description'>(Unique name for group or organization)</span>
    <%= f.text_field :name, required: true, class: "form-control" %>
  </div>
  <% if @tenant.payment.blank? %>
    <%= fields_for( :payment ) do |p| %>
      <div class="row col-md-12">
        <div class="form-group col-md-4 no-left-padding">
          <%= p.label :card_number, "Card Number", data: { stripe: 'label'} %>
          <%= p.text_field :card_number, class: "form-control", required: true, data: { stripe: 'number'} %>
        </div>
        <div class="form-group col-md-2">
          <%= p.label :card_cvv, "Card CVV", data: { stripe: 'label'} %>
          <%= p.text_field :card_cvv, class: "form-control", required: true, data: { stripe: 'cvv'} %>
        </div>
        <div class="form-group col-md-6">
        <div class="col-md-12">
            <%= p.label :card_expires, "Card Expires", data: { stripe: 'label'} %>
        </div>
        <div class="col-md-3">
          <%= p.select :card_expires_month, options_for_select(Payment.month_options), 
                        { include_blank: 'Month'},
                        "data-stripe" => "exp-month",
                        class: "form-control", required: true %>
        </div>
        <div class="col-md-3">
          <%= p.select :card_expires_year, options_for_select(Payment.year_options.push), 
                        { include_blank: 'Year'},
                        class: "form-control", 
                         data: { stripe: "exp-year" }, required: true %>
        </div>
      </div>
    <% end %>
  <% end %>
  <br />
  <div class="row col-md-12">
    <%= f.submit "Update Plan", class: "btn btn-primary", id: 'update_plan' %>
<% end %>

Add update method to tenants controller

class TenantsController < ApplicationController

  before_action :set_tenant

  def edit
  end

  def update
    respond_to do |format|
      @tenant.transaction do
        if @tenant.update(tenant_params)
          if @tenant.plan == "premium" && @tenant.payment.blank?

            @payment = Payment.new({email: tenant_params["email"],
              token: params[:payment]["token"],
              tenant_id: @tenant})
            begin
              @payment.process_payment
              @payment.save
            rescue Exception => e
              flash[:error] = e.message
              @payment.destroy
              @tenant.plan = "free"
              @tenant.save
              redirect_to edit_tenant_path(@tenant) and return
            end
          end
          format.html { redirect_to edit_plan_path, notice: "Plan updated"}
        else
          format.html { render :edit }
        end
      end
    end
  end

  def change
    @tenant = Tenant.find(params[:id])
    Tenant.set_current_tenant @tenant.id
    session[:tenant_id] = Tenant.current_tenant.id
    redirect_to home_index_path, notice: "SWitched to organisation #{@tenant.name}"
  end

  private

    def set_tenant
      @tenant = Tenant.find(Tenant.current_tenant_id)
    end

    def tenant_params
      params.require(:tenant).permit(:name, :plan)
    end
end

Set first user to admin for organisation

rails generate migration add_is_admin_to_users is_admin:boolean

class AddIsAdminToUsers < ActiveRecord::Migration
  def change
    add_column :users, :is_admin, :boolean, default: false
  end
end

rake db:migrate

add mthod to user.rb

def is_admin?
  is_admin
end

Make user signign up as is_admin true in registrations_controller

user_params = sign_up_params_user.merge({ is_admin: true })

CLEAN UP VIEWS

create nav partial in views/common new folder and extract navigation code from layout/application.html.erb

Association between users and projects:

rails generate scaffold UserProject project:belongs_to user:belongs_to

rake db:migrate

rails generate bootstrap:themed UserProjects

Add to user.rb

has_many :user_projects
has_many :projects, through::user_projects

Add to projects.rb:

has_many :user_projects
has_many :users, through::user_projects

Change home_controller:

@projects = Project.by_user_plan_and_tenant(@tenant.id, current_user)

Change projects_controller:
Index
@projects = Project.by_user_plan_and_tenant(params[:tenant_id], current_user)
Create
@project.users << current_user

Make before_actions:

before_action :set_project, only: [:show, :edit, :update, :destroy, :users, :add_user]
before_action :set_tenant, only: [:show, :edit, :update, :destroy, :new, :create, :users, :add_user]

Add new methods:

def users
  @project_users = (project.users + (User.where(tenant_id: @tenant.id, is_admin: true))) - [current_user]
  @other_users = @tenant.users.where(tenant_id: @tenant.id, is_admin: false) - (@project_users + [current_user])
end

def add_user
  @project_user = UserProject.new(user_id: params[:user_id], project_id: @project.id)
  
  respond_to do |format|
    if @project_user.save
      format.html { redirect_to users_tneant_project_url(id: @project.id, tenant_id: @project.tenant_id), notice: "User was added to project" })}
    else
      format.html { redirect_to users_teenant_project_url(id: @project.id, tenant_id: @project.tenant_id), error: "User was not added to project" }
    end
  end
end

Change routes:

resources :tenants do
  resources :projects do
    get 'users', on: :members
    put 'add_user', on: :member
  end
end

Handle redirects in users_projects_controller and change project model (see notes for this)

Add links to views to edit users on project and add lists of users added and to be added for each project.








